---
# yaml-language-server: $schema=https://json.schemastore.org/github-workflow.json
name: "New"

on:
  workflow_dispatch:
  push:
    branches:
      - "master"
      - "main"

env:
  IMAGE_REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  CONTAINER_TEST_IMAGE: ttl.sh/${{ github.sha }}:2h

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout the repository
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      - name: Hadolint
        uses: hadolint/hadolint-action@v3.1.0
        id: hadolint
        if: ${{ always() }}
        with:
          dockerfile: "Dockerfile"
          verbose: true
          format: "json"
          failure-threshold: "error"

      - name: View Hadolint results
        if: ${{ always() }}
        shell: bash
        run: |
          echo "::group::Hadolint Scan Details"
          echo "${HADOLINT_RESULTS}" | jq '.' 
          echo "::endgroup::"
          docker image ls

  build:
    permissions:
      contents: read
      packages: write
    outputs:
      image: ${{ steps.image.outputs.image }}
      digest: ${{ steps.build.outputs.digest }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout the repository
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@b5ca514318bd6ebac0fb2aedd5d36ec1b5c232a2 # v3.10.0

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@902fa8ec7d6ecbf8d84d538b9b233a880e428804 # v5.7.0
        with:
          images: ${{ env.IMAGE_REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=raw,value=latest

      - name: Build a Docker image
        uses: docker/build-push-action@471d1dc4e07e5cdedd4c2171150001c434f0b7a4 # v6.15.0
        id: build
        with:
          push: true
          tags: ${{ env.CONTAINER_TEST_IMAGE }}
          labels: ${{ steps.meta.outputs.labels }}
          sbom: true
          provenance: true

      - name: Output image
        id: image
        run: |
          # NOTE: Set the image as an output because the `env` context is not
          # available to the inputs of a reusable workflow call.
          image_name="${IMAGE_REGISTRY}/${IMAGE_NAME}"
          echo "image=$image_name" >> "$GITHUB_OUTPUT"
          echo "image_tags=${{ steps.meta.outputs.tags }}" >> "$GITHUB_OUTPUT"

  scan:
    needs: [lint, build]
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write
    steps:
      - name: Pull image
        run: |
          docker pull ${{ env.CONTAINER_TEST_IMAGE }}

      - name: Scan Image for Vulnerabilities with trivy
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.CONTAINER_TEST_IMAGE }}
          vuln-type: os,library
          severity: CRITICAL,HIGH
          format: spdx-json
          output: reports/trivy-results-spdx.json
          exit-code: 1 # Bricht ab, wenn kritische CVEs gefunden werden
          ignore-unfixed: true

      # - name: Upload Trivy scan report
      #   if: always()
      #   uses: actions/upload-artifact@v4
      #   with:
      #     name: trivy-results
      #     path: trivy-results-spdx.json

      - name: Scan Image for Vulnerabilities with anchore
        uses: anchore/scan-action@7c05671ae9be166aeb155bad2d7df9121823df32 # v6.1.0
        id: anchore
        with:
          image: ${{ env.CONTAINER_TEST_IMAGE }}
          fail-build: true
          severity-cutoff: high
          output-format: cyclonedx-json
          output-file: reports/anchore-results-cyclonedx.json

      # - name: Upload Anchore scan report
      #   if: always()
      #   uses: actions/upload-artifact@v4
      #   with:
      #     name: anchore-results
      #     path: anchore-results-cyclonedx.json

      - name: Grab cache Clair DB
        uses: actions/cache@v3
        with:
          path: matcher.db
          key: matcher.db

      #      - name: Run Clair update DB
      #        uses: quay/clair-action@main
      #        with:
      #          db-file: matcher.db
      #          mode: update
      #
      #      - name: update cache Clair DB
      #        uses: actions/cache@v3
      #        with:
      #          path: matcher.db
      #          key: matcher.db

      - name: Run Clair scan
        uses: quay/clair-action@main
        if: always()
        with:
          image-ref: ${{ env.CONTAINER_TEST_IMAGE }}
          db-file: matcher.db
          format: sarif
          output: reports/clair_results.sarif

      # - name: Upload Clair scan report
      #   if: always()
      #   uses: actions/upload-artifact@v4
      #   with:
      #     name: clair-results
      #     path: clair_results.sarif

      - name: Run NeuVector scan
        if: always()
        uses: neuvector/scan-action@main
        with:
          debug: false
          image-registry: https://ttl.sh
          image-repository: ${{ github.sha }}
          image-tag: 2h
          min-high-cves-to-fail: "1"
          min-medium-cves-to-fail: "1"
          output: text

      - name: Prepare NeuVector Report
        if: always()
        run: |
          mv scanner_output.log reports/neuvector_scanner_output.log
          mv scan_result.json reports/neuvector_scan_result.json

      - name: Dockle Linter
        uses: erzz/dockle-action@v1.4.0
        if: ${{ always() }}
        with:
          image: ${{ env.CONTAINER_TEST_IMAGE }}
          exit-code: 42
          failure-threshold: fatal

      - name: Prepare Dockle Report
        if: always()
        run: |
          mv dockle-report.json reports/dockle-report.json

      - name: Scan image with trufflehog
        if: always()
        run: |
          docker run --rm -v "$PWD:/pwd" trufflesecurity/trufflehog:latest docker --image ${{ env.CONTAINER_TEST_IMAGE }} --results=verified,unknown --json  | jq > reports/trufflehog-report.json

      # - name: Upload trufflehog Report
      #   uses: actions/upload-artifact@v4
      #   if: always()
      #   with:
      #     name: trufflehog Report
      #     path: output.json

      - name: Export container filesystem
        if: always()
        run: |
          docker save -o image.tar ${{ env.CONTAINER_TEST_IMAGE }}
          mkdir -p container-rootfs
          tar -xf image.tar -C container-rootfs

      - name: Scan with ClamAV
        if: always()
        run: |
          sudo apt-get update && sudo apt-get install -y clamav
          clamscan -r --infected container-rootfs | tee reports/clamscan.log

      # - name: Upload ClamAV Report
      #   uses: actions/upload-artifact@v4
      #   if: always()
      #   with:
      #     name: ClamAV Report
      #     path: clamscan.log

      - name: Upload Reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: Scan Reports
          path: reports

      - name: "Debug: ls"
        if: always()
        run: |
          ls -latr

  provenance:
    needs: [lint, build]
    permissions:
      actions: read # for detecting the Github Actions environment.
      id-token: write # for creating OIDC tokens for signing.
      packages: write # for uploading attestations.
    #if: startsWith(github.ref, 'refs/tags/')
    uses: slsa-framework/slsa-github-generator/.github/workflows/generator_container_slsa3.yml@v2.1.0
    with:
      image: ${{ needs.build.outputs.image }}
      digest: ${{ needs.build.outputs.digest }}
      registry-username: ${{ github.actor }}
    secrets:
      registry-password: ${{ secrets.GITHUB_TOKEN }}

  verify-supply-chain:
    needs: [provenance]
    runs-on: ubuntu-latest
    steps:
      - name: Sign the Image and Attestation
        uses: sigstore/cosign-installer@v3
        with:
          cosign-version: "latest"

      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install in-toto
        run: |
          pip install in-toto

      - name: Download Attestation
        run: |
          cosign verify-attestation \
            --type slsaprovenance \
            --key env://COSIGN_PRIVATE_KEY \
            ${{ needs.provenance.outputs.image }} > attestation.json

      - name: Verify supply chain integrity with in-toto
        run: |
          in-toto-verify \
            --layout attestation.json \
            --layout-key slsa.pub

  sign_push:
    needs: [verify-supply-chain, scan]
    runs-on: ubuntu-latest
    steps:
      - name: Install Cosign
        uses: sigstore/cosign-installer@v3
        with:
          cosign-version: "latest"

      - name: Authenticate Docker
        uses: docker/login-action@74a5d142397b4f367a81961eba4e8cd7edddf772 # v3.4.0
        with:
          registry: ${{ env.IMAGE_REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Tag & Sign Image
        run: |
          for tag in ${{ needs.build.outputs.image_tags }}; do
            docker tag ${{ env.CONTAINER_TEST_IMAGE }} "$tag"
            cosign sign --yes ${{ needs.build.outputs.image }} \
              --key env://COSIGN_PRIVATE_KEY
          done

      - name: Push image
        run: |
          for tag in ${{ needs.build.outputs.image_tags }}; do
            docker push "$tag"
            cosign attest --yes --predicate attestation.json "$tag"
          done
